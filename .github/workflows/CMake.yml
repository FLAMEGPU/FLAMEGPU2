# Configure CMake for a number of CMake versions, but do not compile.
name: CMake

on:
  # Branch pushes that do not only modify other workflow files
  push:
    branches:
      - '**'
    paths:
      - "**"
      - "!.github/**"
      - ".github/scripts/install_cuda_ubuntu.sh"
      - ".github/workflows/CMake.yml"
  # Allow manual invocation.
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  configure:
    runs-on: ${{ matrix.cudacxx.os }}
    strategy:
      fail-fast: false
      # Multiplicative build matrix
      matrix:
        cudacxx:
          - cuda: "13.0"
            cuda_arch: "75"
            hostcxx: gcc-12
            os: ubuntu-24.04
          - cuda: "13.0.0"
            cuda_arch: "75"
            hostcxx: "Visual Studio 17 2022"
            os: windows-2025
        python:
          - "3.10"
        config:
          - name: "Release"
            config: "Release"
            SEATBELTS: "ON"
        VISUALISATION:
          - "ON"
        # 'default' or '' will not install cmake, otherwise provide a full semver version.
        cmake:
          - "default"
          - "4.0.0"
          - "3.31.8"
          - "3.25.2"

    # Name the job based on matrix/env options
    name: "configure (${{ matrix.cmake }}, ${{ matrix.cudacxx.cuda }}, ${{matrix.python}}, ${{ matrix.VISUALISATION }}, ${{ matrix.config.name }}, ${{ matrix.cudacxx.os }})"

    # Define job-wide env constants, and promote matrix elements to env constants for portable steps.
    env:
      # Workflow specific constants for building a specific example
      # Note this assumes the example exists in cpp, rather than cpp_rtc subdirectory
      INDIVIDUAL_EXAMPLE: "game_of_life"
      # Define constants
      BUILD_DIR: "build"
      FLAMEGPU_BUILD_TESTS: "ON"
      # Conditional based on matrix via awkward almost ternary
      FLAMEGPU_BUILD_PYTHON: ${{ fromJSON('{true:"ON",false:"OFF"}')[matrix.python != ''] }}
      # Port matrix options to environment, for more portability.
      CUDA: ${{ matrix.cudacxx.cuda }}
      CUDA_ARCH: ${{ matrix.cudacxx.cuda_arch }}
      HOSTCXX: ${{ matrix.cudacxx.hostcxx }}
      OS: ${{ matrix.cudacxx.os }}
      CONFIG: ${{ matrix.config.config }}
      FLAMEGPU_SEATBELTS: ${{ matrix.config.SEATBELTS }}
      PYTHON: ${{ matrix.python}}
      VISUALISATION: ${{ matrix.VISUALISATION }}
      # Ensure MSVC >= 1940 works with CUDA <= 12.3
      NVCC_PREPEND_FLAGS: "-D_ALLOW_COMPILER_AND_STL_VERSION_MISMATCH --allow-unsupported-compiler"
      CMAKE: ${{ matrix.cmake }}
      

    steps:
    - uses: actions/checkout@v4

    - name: Install cmake from GitHub Releases (Linux)
      if: ${{ startswith(env.OS, 'ubuntu') && env.CMAKE != '' && env.CMAKE != 'default' }}
      working-directory: ${{ runner.temp }}
      run: |
        wget -q https://github.com/Kitware/CMake/releases/download/v${{ env.CMAKE }}/cmake-${{ env.CMAKE }}-linux-x86_64.tar.gz
        tar -zxvf cmake-${{ env.CMAKE }}-linux-x86_64.tar.gz
        # Inner directory case changes in some releases, use find to get the right path
        echo "$(dirname $(find $(pwd) -wholename "*/bin/cmake" -exec echo {} \; -quit))" >> $GITHUB_PATH

    - name: Install cmake from GitHub Releases (Windows)
      if: ${{ runner.os == 'Windows' && env.CMAKE != '' && env.CMAKE != 'default' }}
      working-directory: ${{ runner.temp }}
      run: |
        curl -s -L -O  https://github.com/Kitware/CMake/releases/download/v${{ env.CMAKE }}/cmake-${{ env.CMAKE }}-windows-x86_64.zip
        ls
        7z.exe x "cmake-${{ env.CMAKE }}-windows-x86_64.zip" -o"cmake-${{ env.CMAKE }}-windows-x86_64"
        echo "$(dirname $(find $(pwd) -wholename "*/bin/cmake.exe" -exec echo {} \; -quit))" >> $GITHUB_PATH

    - name: Check CMake Version
      run: cmake --version

    - name: Install CUDA (Ubuntu)
      if: ${{ startswith(env.OS, 'ubuntu') && env.CUDA != '' }}
      env:
        cuda: ${{ env.CUDA }}
      run: .github/scripts/install_cuda_ubuntu.sh

    - name: Install CUDA (Windows)
      if: ${{ runner.os == 'Windows' && env.CUDA != '' }}
      shell: powershell
      timeout-minutes: 35
      env:
        cuda: ${{ env.CUDA }}
        visual_studio: ${{ env.HOSTCXX }}
      run: |
        if ([version]$env:cuda -ge [version]"12.0") {
          .github\scripts\install_cuda_windows_redist.ps1
        } else {
          .github\scripts\install_cuda_windows.ps1
        }

    - name: Install/Select gcc and g++ (Ubuntu)
      if: ${{ startsWith(env.HOSTCXX, 'gcc-') }}
      run: |
        gcc_version=${HOSTCXX//gcc-/}
        sudo apt-get install -y gcc-${gcc_version} g++-${gcc_version}
        echo "CC=/usr/bin/gcc-${gcc_version}" >> $GITHUB_ENV
        echo "CXX=/usr/bin/g++-${gcc_version}" >> $GITHUB_ENV
        echo "CUDAHOSTCXX=/usr/bin/g++-${gcc_version}" >> $GITHUB_ENV

    - name: Select Python
      if: ${{ env.PYTHON != '' && env.FLAMEGPU_BUILD_PYTHON == 'ON' }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON }}

    - name: Install python dependencies (Ubuntu)
      if: ${{ startswith(env.OS, 'ubuntu') && env.PYTHON != '' && env.FLAMEGPU_BUILD_PYTHON == 'ON' }}
      run: |
        sudo apt-get install python3-venv
        python3 -m pip install --upgrade wheel build setuptools

    - name: Install python dependencies (Windows)
      if: ${{ runner.os == 'Windows' && env.PYTHON != '' && env.FLAMEGPU_BUILD_PYTHON == 'ON' }}
      run: |
        python3 -m pip install --upgrade wheel build setuptools

    - name: Install Visualisation Dependencies (Ubuntu)
      if: ${{ startswith(env.OS, 'ubuntu') && env.VISUALISATION == 'ON' }}
      run: |
        # Install ubuntu-24.04 packages
        if [ "$OS" == 'ubuntu-24.04' ]; then
          sudo apt-get install -y libglew-dev libfontconfig1-dev libsdl2-dev libdevil-dev libfreetype-dev
        fi
        # Install ubuntu-22.04 packages
        if [ "$OS" == 'ubuntu-22.04' ]; then
          sudo apt-get install -y libglew-dev libfontconfig1-dev libsdl2-dev libdevil-dev libfreetype-dev
        fi

    - name: Install Swig >= 4.1.0 (Ubuntu)
      if: ${{ startswith(env.OS, 'ubuntu') && env.PYTHON != '' && env.FLAMEGPU_BUILD_PYTHON == 'ON' }}
      run: |
        # Install additional apt-based dependencies required to build swig 4.1.0.
        # swig >= 4.1 requires pcre2-config from libpcre2-dev
        sudo apt-get install -y bison automake libpcre2-dev
        # Create a local directory to build swig in.
        mkdir -p swig-from-source && cd swig-from-source
        # Install SWIG building from source dependencies
        wget https://github.com/swig/swig/archive/refs/tags/v4.1.0.tar.gz
        tar -zxf v4.1.0.tar.gz
        cd swig-4.1.0/
        ./autogen.sh
        ./configure
        make
        sudo make install

    - name: Enable git safe-directory
      run: git config --global --add safe.directory $GITHUB_WORKSPACE

    - name: Configure cmake
      run: >
        cmake . -B "${{ env.BUILD_DIR }}"
        -DCMAKE_BUILD_TYPE="${{ env.CONFIG }}"
        -Werror=dev
        -DCMAKE_WARN_DEPRECATED="ON"
        -DFLAMEGPU_WARNINGS_AS_ERRORS="ON"
        -DCMAKE_CUDA_ARCHITECTURES="${{ env.CUDA_ARCH }}"
        -DFLAMEGPU_SEATBELTS="${{ env.FLAMEGPU_SEATBELTS }}"
        -DFLAMEGPU_BUILD_TESTS="${{ env.FLAMEGPU_BUILD_TESTS }}"
        -DFLAMEGPU_BUILD_PYTHON="${{ env.FLAMEGPU_BUILD_PYTHON }}"
        -DPYTHON3_EXACT_VERSION="${{ env.PYTHON }}"
        -DFLAMEGPU_VISUALISATION="${{ env.VISUALISATION }}"
        -DFLAMEGPU_ENABLE_NVTX="ON"

    - name: Configure Individual example
      if: ${{ env.INDIVIDUAL_EXAMPLE != '' }}
      working-directory: examples/cpp/${{ env.INDIVIDUAL_EXAMPLE }}
      run: >
        cmake . -B "${{ env.BUILD_DIR }}"
        -DCMAKE_BUILD_TYPE="${{ env.CONFIG }}"
        -Werror=dev
        -DCMAKE_WARN_DEPRECATED="ON"
        -DFLAMEGPU_WARNINGS_AS_ERRORS="ON"
        -DCMAKE_CUDA_ARCHITECTURES="${{ env.CUDA_ARCH }}"
        -DFLAMEGPU_SEATBELTS="${{ env.FLAMEGPU_SEATBELTS }}"
        -DFLAMEGPU_VISUALISATION="${{ env.VISUALISATION }}"
        -DFLAMEGPU_ENABLE_NVTX="ON"
