# Compile project on Ubuntu
name: Ubuntu

on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      # explicit include-based build matrix, of known valid options
      matrix:
        include:
          # 20.04 supports CUDA 11.0+ (gcc >= 5 && gcc <= 10.2). SM < 52 deprecated since 11.0
          - os: ubuntu-20.04
            cuda: "11.4"
            cuda_arch: "52"
            gcc: 9
          # 18.04 supports CUDA 10.0+ (gcc <=8), 11.0+ (gcc<=9), 11.1+ (gcc<=10)
          - os: ubuntu-18.04
            cuda: "10.0"
            cuda_arch: "35"
            gcc: 7
    env:
      build_dir: "build"
      config: "Release"
      build_tests: "ON"
      Werror: "ON"
      individual_example: "game_of_life"
      build_individual_example: "ON"

    steps:
    - uses: actions/checkout@v2

    # Install a specific cmake version to avoid gtest issues.
    # - name: Install Specific Cmake version via Pip.
    #   run: |
    #     python3 -m pip install --user cmake==3.18.4
    #     echo "$(python3 -m site --user-base)/bin" >> $GITHUB_PATH

    - name: Install CUDA
      env:
        cuda: ${{ matrix.cuda }}
      shell: bash
      run: .github/scripts/install_cuda_ubuntu.sh

    # Specify the correct host compilers
    - name: Install/Select gcc and g++ 
      run: |
        sudo apt-get install -y gcc-${{ matrix.gcc }} g++-${{ matrix.gcc }}
        echo "CC=/usr/bin/gcc-${{ matrix.gcc }}" >> $GITHUB_ENV
        echo "CXX=/usr/bin/g++-${{ matrix.gcc }}" >> $GITHUB_ENV
        echo "CUDAHOSTCXX=/usr/bin/g++-${{ matrix.gcc }}" >> $GITHUB_ENV

    - name: install setuptools with an appropriate version
      run: | 
        python3 -m pip install --upgrade wheel
        python3 -m pip install --upgrade 'setuptools; python_version >= "3.6"' 'setuptools<51.3.0; python_version < "3.6" and python_version >= "3.0"'


    - name: Install Python Venv
      run: sudo apt-get install python3-venv

    - name: Configure cmake
      run: cmake . -B ${{ env.build_dir }} -DCMAKE_BUILD_TYPE=${{ env.config }} -DBUILD_TESTS=${{ env.build_tests }} -DWARNINGS_AS_ERRORS=${{ env.Werror }} -DCUDA_ARCH="${{ matrix.cuda_arch }}" -Werror=dev -DCMAKE_WARN_DEPRECATED=OFF -DBUILD_SWIG_PYTHON=ON -DUSE_NVTX=ON

    - name: Build flamegpu
      run: cmake --build . --target flamegpu --verbose -j `nproc`
      working-directory: ${{ env.build_dir }}

    - name: Build pyflamegpu
      run: cmake --build . --target pyflamegpu --verbose -j `nproc`
      working-directory: ${{ env.build_dir }}

    - name: Build tests
      if: env.build_tests == 'ON' && matrix.gcc > 6
      run: cmake --build . --target tests --verbose -j `nproc`
      working-directory: ${{ env.build_dir }}

    - name: Build everything else
      run: cmake --build . --target all --verbose -j `nproc`
      working-directory: ${{ env.build_dir }}

    - name: Configure Individual example
      run: cmake . -B ${{ env.build_dir }} -DCMAKE_BUILD_TYPE=${{ env.config }} -DWARNINGS_AS_ERRORS=${{ env.Werror }} -DCUDA_ARCH="${{ matrix.cuda_arch }}" -Werror=dev -DCMAKE_WARN_DEPRECATED=OFF
      working-directory: examples/${{ env.individual_example }}
    
    - name: Build Individual example
      if: env.build_individual_example == 'ON'
      run: cmake --build . --target ${{ env.individual_example }} --verbose -j `nproc`
      working-directory: examples/${{ env.individual_example }}/${{ env.build_dir }}

