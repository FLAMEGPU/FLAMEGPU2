# Compile project on Ubuntu
name: Ubuntu

on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      # explicit include-based build matrix, of known valid options
      matrix:
        include:
          # 18.04 supports CUDA 10.1+ (gxx <= 8)
          - os: ubuntu-18.04
            cuda: "10.2"
            gcc: 8
          # - os: ubuntu-18.04
          #   cuda: "10.1"
          #   gcc: 8

          # 16.04 supports CUDA 8+, we require 9.2+ due to gcc 7+ dependency (gtest+nvcc combo)
          # - os: ubuntu-16.04
          #   cuda: "10.0"
          #   gcc: 7
          # - os: ubuntu-16.04
          #   cuda: "9.2"
          #   gcc: 7
          
          # CUDA 9.1 and below cannot build tests, but should build the library
          # - os: ubuntu-16.04
          #   cuda: "9.1"
          #   gcc: 6
          # - os: ubuntu-16.04
          #   cuda: "9.0"
          #   gcc: 6
    env:
      cuda_arch: "35;75"
      build_dir: "build"
      config: "Release"
      build_tests: "ON"
      Werror: "ON"

    steps:
    - uses: actions/checkout@v2

    - name: Install CUDA
      env:
        cuda: ${{ matrix.cuda }}
      run: |
        source ./scripts/actions/install_cuda_ubuntu.sh
        if [[ $? -eq 0 ]]; then
          # Set paths for subsequent steps, using ${CUDA_PATH}
          echo "Adding CUDA to CUDA_PATH, PATH and LD_LIBRARY_PATH"
          echo "::set-env name=CUDA_PATH::${CUDA_PATH}"
          echo "::add-path::${CUDA_PATH}/bin"
          echo "::set-env name=LD_LIBRARY_PATH::${CUDA_PATH}/lib:${LD_LIBRARY_PATH}"
        fi
      shell: bash

    # Specify the correct host compilers
    - name: Install/Select gcc and g++ 
      run: |
        sudo apt-get install -y gcc-${{ matrix.gcc }} g++-${{ matrix.gcc }}
        echo "::set-env name=CC::/usr/bin/gcc-${{ matrix.gcc }}"
        echo "::set-env name=CXX::/usr/bin/g++-${{ matrix.gcc }}"
        echo "::set-env name=CUDAHOSTCXX::/usr/bin/g++-${{ matrix.gcc }}"

    - name: Configure cmake
      run: cmake . -B ${{ env.build_dir }} -DCMAKE_BUILD_TYPE=${{ env.config }} -DBUILD_TESTS=${{ env.build_tests }} -DWARNINGS_AS_ERRORS=${{ env.Werror }} -DCUDA_ARCH="${{ env.cuda_arch }}"

    - name: Build flamegpu2
      run: cmake --build . --target flamegpu2 --verbose -j `nproc`
      working-directory: ${{ env.build_dir }}

    - name: Build tests
      if: env.build_tests == 'ON' && matrix.gcc > 6
      run: cmake --build . --target tests --verbose -j `nproc`
      working-directory: ${{ env.build_dir }}

    - name: Build everything else
      run: cmake --build . --target all --verbose -j `nproc`
      working-directory: ${{ env.build_dir }}

