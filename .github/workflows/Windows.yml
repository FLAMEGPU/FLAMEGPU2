# Windows builds.
name: Windows

on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      # explicit include-based build matrix, of known valid options
      matrix:
        include:
          # Windows2019 & VS 2019 supports 10.1+
          - os: windows-2019
            cuda: "11.1.1"
            visual_studio: "Visual Studio 16 2019"
          # - os: windows-2019
          #   cuda: "11.0.3"
          #   visual_studio: "Visual Studio 16 2019"
          # - os: windows-2019
          #   cuda: "10.2.89"
          #   visual_studio: "Visual Studio 16 2019"
          # - os: windows-2019
          #   cuda: "10.1.243"
          #   visual_studio: "Visual Studio 16 2019"

          # Windows2016 & VS 2017 supports 10.0+
          # - os: windows-2016
          #   cuda: "10.0.130"
          #   visual_studio: "Visual Studio 15 2017"

    env:
      cuda_arch: "35"
      build_dir: "build"
      config: "Release"
      build_tests: "OFF"
      Werror: "ON"
      individual_example: "game_of_life"
      build_individual_example: "OFF"

    steps:
    - uses: actions/checkout@v2

    - name: Install CUDA
      env: 
        cuda: ${{ matrix.cuda }}
        visual_studio: ${{ matrix.visual_studio }}
      run: |
        # Install CUDA via a powershell script
        .\scripts\actions\install_cuda_windows.ps1
        if ($?) {
          # Set paths for subsequent steps, using $env:CUDA_PATH
          echo "Adding CUDA to CUDA_PATH, CUDA_PATH_X_Y and PATH"
          echo "CUDA_PATH=$env:CUDA_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "$env:CUDA_PATH_VX_Y=$env:CUDA_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "$env:CUDA_PATH/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        }
      shell: powershell

    - name: Configure CMake
      id: configure
      run: cmake . -B ${{ env.build_dir }} -G "${{ matrix.visual_studio }}" -A x64 -DBUILD_TESTS=${{ env.build_tests }} -DWARNINGS_AS_ERRORS=${{ env.werror }} -DCUDA_ARCH="${{ env.cuda_arch }}" -Werror=dev -DBUILD_SWIG_PYTHON=ON -DBUILD_SWIG_PYTHON_VIRTUALENV=ON 
      shell: bash

    - name: Build flamegpu2
      run: cmake --build . --config ${{ env.config }} --target flamegpu2 --verbose
      working-directory: ${{ env.build_dir }}

    - name: Build pyflamegpu
      run: cmake --build . --config ${{ env.config }} --target pyflamegpu --verbose
      working-directory: ${{ env.build_dir }}

    - name: Build tests
      if: env.build_tests == 'ON'
      run: cmake --build . --config ${{ env.config }} --target tests --verbose
      working-directory: ${{ env.build_dir }}

    - name: Build everything else
      run: cmake --build . --config ${{ env.config }} --target ALL_BUILD --verbose
      working-directory: ${{ env.build_dir }}

    - name: Configure Individual example
      run: cmake . -B ${{ env.build_dir }} -G "${{ matrix.visual_studio }}" -A x64 -DWARNINGS_AS_ERRORS=${{ env.werror }} -DCUDA_ARCH="${{ env.cuda_arch }}" -Werror=dev
      working-directory: examples/${{ env.individual_example }}
    
    - name: Build Individual example
      if: env.build_individual_example == 'ON'
      run: cmake --build . --config ${{ env.config }} --target ${{ env.individual_example }} --verbose
      working-directory: examples/${{ env.individual_example }}/${{ env.build_dir }}