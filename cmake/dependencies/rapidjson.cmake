#############
# RapidJSON #
#############

set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}/modules/ ${CMAKE_MODULE_PATH})
include(FetchContent)
include(ExternalProject)
cmake_policy(SET CMP0079 NEW)

# a95e013b97ca6523f32da23f5095fcc9dd6067e5 is the last commit before a change which breaks our method of finding rapid json without running a cmake install first.
# but we also need to patch this to avoid a cmake >= 3.26.4 deprecation, but this is handled manually post-population
FetchContent_Declare(
    rapidjson
    GIT_REPOSITORY https://github.com/Tencent/rapidjson.git
    GIT_TAG        a95e013b97ca6523f32da23f5095fcc9dd6067e5
    GIT_PROGRESS   ON
    # UPDATE_DISCONNECTED   ON
)
FetchContent_GetProperties(rapidjson)
if(NOT rapidjson_POPULATED)
    FetchContent_Populate(rapidjson)
    # Manually patch Rapidjson for cmake minimum version.
    # PATCH_COMMAND that works reliably on windows was problematic.
    # Check if the patch is applicable
    execute_process(
        COMMAND git apply --check ${CMAKE_CURRENT_LIST_DIR}/patches/rapidjson-cmake-3.5-deprecation.patch
        WORKING_DIRECTORY "${rapidjson_SOURCE_DIR}"
        RESULT_VARIABLE rapidjson_patch_check_result
        OUTPUT_QUIET
        ERROR_QUIET
    )
    if (rapidjson_patch_check_result EQUAL 0)
        # If applicable, apply the patch
        message(CHECK_START  "Patching RapidJSON")
        execute_process(
            COMMAND git apply ${CMAKE_CURRENT_LIST_DIR}/patches/rapidjson-cmake-3.5-deprecation.patch
            WORKING_DIRECTORY "${rapidjson_SOURCE_DIR}"
            RESULT_VARIABLE rapidjson_patch_result
            OUTPUT_QUIET
            ERROR_QUIET
        )
        # If the patch failed emit a Warnign but allow cmake to progress. This should not occur given the previous check. 
        if (rapidjson_patch_check_result EQUAL 0)
            message(CHECK_PASS "done")
        else()
            message(CHECK_FAIL "patching failed")
        endif()
        unset(rapidjson_patch_result)
    endif()
    unset(rapidjson_patch_check_result)

    # RapidJSON has custom RapidJSONConfig.cmake, generated by cmake configure/generate
    execute_process(
    COMMAND ${CMAKE_COMMAND} . -DRAPIDJSON_BUILD_DOC=OFF -DRAPIDJSON_BUILD_EXAMPLES=OFF -DRAPIDJSON_BUILD_TESTS=OFF -DRAPIDJSON_BUILD_THIRDPARTY_GTEST=OFF -Wno-deprecated
    WORKING_DIRECTORY "${rapidjson_SOURCE_DIR}"
    OUTPUT_QUIET
    )
    set(CMAKE_PREFIX_PATH "${CMAKE_PREFIX_PATH};${rapidjson_SOURCE_DIR}")
    find_package(RapidJSON REQUIRED
        PATHS ${rapidjson_SOURCE_DIR}
            NO_CMAKE_PATH
            NO_CMAKE_ENVIRONMENT_PATH
            NO_SYSTEM_ENVIRONMENT_PATH
            NO_CMAKE_PACKAGE_REGISTRY
            NO_CMAKE_SYSTEM_PATH)
    # Include path is ${RapidJSON_INCLUDE_DIRS}

    # Create a namespaced alias target
    if(TARGET rapidjson)
        add_library(RapidJSON::rapidjson ALIAS rapidjson)
    endif()

endif()

# Mark some CACHE vars advanced for a cleaner GUI
mark_as_advanced(RapidJSON_DIR)
mark_as_advanced(FETCHCONTENT_SOURCE_DIR_RAPIDJSON)
mark_as_advanced(FETCHCONTENT_QUIET)
mark_as_advanced(FETCHCONTENT_BASE_DIR)
mark_as_advanced(FETCHCONTENT_FULLY_DISCONNECTED)
mark_as_advanced(FETCHCONTENT_UPDATES_DISCONNECTED)
mark_as_advanced(FETCHCONTENT_UPDATES_DISCONNECTED_RAPIDJSON)